// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String @id @unique
  user_id      String
  expires      BigInt
  idle_expires BigInt
  user         User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("session")
}

model User {
  id              String    @id @unique @default(cuid())
  provider_id     String    @unique
  hashed_password String?
  session         Session[]

  email     String    @unique
  firstname String
  lastname  String
  purchased Product[] @relation("ProductBuyer")
  wishlist  Product[] @relation("Wishlist")
  cart      Product[] @relation("ProductCart")
  products  Product[]

  Review Review[]

  @@unique([firstname, lastname], name: "fullname")
  @@index([email])
  @@map("user") // means that the table in the database will be named "user" instead of "User"
}

model Product {
  id            String     @id @unique @default(cuid())
  name          String
  description   String
  quantity      Int
  price         Int
  imgPath       String
  averageRating Float?
  reviews       Review[]
  categories    Category[]

  createdBy    User   @relation(fields: [userId], references: [id])
  purchasedBy  User[] @relation("ProductBuyer")
  wishlistedBy User[] @relation("Wishlist")
  inCartOf     User[] @relation("ProductCart")

  userId String
}

model Category {
  name     String    @id @unique
  products Product[]
}

model Review {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Float // user rating e.g 1 | 1.5 | 2 | 2.5 ... 4.5 | 5
  content   String   @db.Text
  createdBy User     @relation(fields: [userId], references: [id])
  userId    String   @id
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}
